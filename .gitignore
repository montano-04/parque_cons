import random

# Inicialización de tablero y jugadores
CASILLAS = [ [] for _ in range(68) ]
META = {color: [None]*8 for color in ["rojo", "verde", "amarillo", "azul"]}
JUGADORES = {}

def crear_jugadores(colores):
    for color in colores:
        fichas = []
        for i in range(1, 5):
            ficha = {
                "jugador": color,
                "id": i,
                "estado": "carcel",
                "posicion": None
            }
            fichas.append(ficha)
        JUGADORES[color] = {"fichas": fichas}

def tirar_dado():
    return random.randint(1, 6)

def mostrar_tablero():
    print("\n🟦 TABLERO:")
    for i, casilla in enumerate(CASILLAS):
        contenido = ', '.join([f"{f['jugador']}-{f['id']}" for f in casilla])
        if contenido:
            print(f"Casilla {i}: {contenido}")
    print("🎯 META:")
    for color, zona in META.items():
        meta_contenido = ', '.join([f"{f['jugador']}-{f['id']}" if f else "—" for f in zona])
        print(f"{color}: {meta_contenido}")

def mover_ficha(ficha, pasos):
    jugador = ficha["jugador"]

    if ficha["estado"] == "carcel":
        if pasos == 5:
            ficha["estado"] = "activo"
            ficha["posicion"] = 0
            CASILLAS[0].append(ficha)
            print(f"🟢 Ficha {ficha['id']} de {jugador} sale de la cárcel.")
        else:
            print("⛔ Necesita sacar 5 para salir de cárcel.")
        return

    if ficha["estado"] == "activo":
        origen = ficha["posicion"]
        destino = origen + pasos

        if destino < 68:
            bloqueada = verificar_bloqueo(destino, jugador)
            if bloqueada:
                print("⛔ Movimiento bloqueado.")
                return
            # Captura si hay ficha enemiga
            capturar(destino, jugador)
            CASILLAS[origen].remove(ficha)
            CASILLAS[destino].append(ficha)
            ficha["posicion"] = destino
            print(f"➡️ Ficha {ficha['id']} de {jugador} se movió a casilla {destino}.")
        else:
            avance_meta = destino - 68
            if avance_meta < 8 and META[jugador][avance_meta] is None:
                CASILLAS[origen].remove(ficha)
                META[jugador][avance_meta] = ficha
                ficha["estado"] = "meta"
                ficha["posicion"] = avance_meta
                print(f"🏁 Ficha {ficha['id']} llegó a META.")
            else:
                print("⛔ Movimiento inválido en zona de llegada.")

def verificar_bloqueo(posicion, color):
    casilla = CASILLAS[posicion]
    if len(casilla) == 2:
        colores = {f["jugador"] for f in casilla}
        return (len(colores) == 1 and color in colores) or posicion in [0, 5, 12, 17, 22, 29, 34, 39, 46, 51, 56, 63]  # Casillas seguras aproximadas
    return False

def capturar(posicion, color):
    casilla = CASILLAS[posicion]
    for f in casilla[:]:
        if f["jugador"] != color and posicion not in [5, 12, 17, 22, 29, 34, 39, 46, 51, 56]:  # no se captura en seguro
            print(f"⚔️ ¡{color} capturó ficha {f['id']} de {f['jugador']}!")
            casilla.remove(f)
            f["estado"] = "carcel"
            f["posicion"] = None
            return True
    return False

def partida_terminada():
    for color, datos in JUGADORES.items():
        fichas_meta = [f for f in datos["fichas"] if f["estado"] == "meta"]
        if len(fichas_meta) == 4:
            print(f"\n🏆 ¡{color.upper()} ha ganado!")
            return True
    return False

def ejecutar_turno(color):
    jugador = JUGADORES[color]
    dado = tirar_dado()
    print(f"\n🎲 Turno de {color.upper()} — Dado: {dado}")

    opciones = [f for f in jugador["fichas"] if f["estado"] == "activo" or (f["estado"] == "carcel" and dado == 5)]

    if not opciones:
        print("🔒 No hay fichas movibles.")
        return

    if len(opciones) == 1:
        mover_ficha(opciones[0], dado)
    else:
        print("Elige ficha:")
        for idx, f in enumerate(opciones):
            estado = "carcel" if f["estado"] == "carcel" else f["posicion"]
            print(f"{idx+1}) Ficha {f['id']} ({estado})")
        eleccion = int(input("Número: ")) - 1
        mover_ficha(opciones[eleccion], dado)

# 🎮 Inicio del juego
def jugar_parques():
    colores = ["rojo", "verde", "amarillo", "azul"]
    crear_jugadores(colores)
    turno = 0

    while not partida_terminada():
        mostrar_tablero()
        ejecutar_turno(colores[turno])
        turno = (turno + 1) % len(colores)

if __name__ == "__main__":
    jugar_parques()
